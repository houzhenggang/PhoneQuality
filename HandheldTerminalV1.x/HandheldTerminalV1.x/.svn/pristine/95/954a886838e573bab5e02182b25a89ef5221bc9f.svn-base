package com.cattsoft.phone.quality.ui.fragments.filedownload;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import com.beardedhen.androidbootstrap.BootstrapButton;
import com.cattsoft.phone.quality.R;
import com.cattsoft.phone.quality.task.FileDownloadTask;
import com.cattsoft.phone.quality.ui.fragments.RoboLazyFragment;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import roboguice.inject.InjectResource;
import roboguice.inject.InjectView;

import java.util.List;
import java.util.Map;

/**
 * Created by yushiwei on 15-5-20.
 */
public class FileDownloadFragment extends RoboLazyFragment {

    public static final String TAG = FileDownloadFragment.class.getSimpleName();

    public static final String FILEDOWNLOAD_CURR_URL = "filedownload_curr_url";

    public static final String FILEDOWNLOAD_CURR_WEBSITE = "filedownload_curr_website";

    @InjectView(R.id.file_download_max_speed_unit)
    TextView max_speed_unit;

    @InjectResource(R.string.filedownload_show_format)
    private String show_format;

    @InjectView(R.id.file_download_curr_speed)
    private TextView curr_speed;

    @InjectView(R.id.file_download_curr_speed_unit)
    private TextView curr_speed_unit;

    @InjectView(R.id.file_download_max_speed)
    private TextView max_speed;

    @InjectView(R.id.file_download_avg_speed)
    private TextView avg_speed;

    @InjectView(R.id.file_download_avg_speed_unit)
    private TextView avg_speed_unit;

    @InjectView(R.id.file_download_downloaded)
    private TextView downloaded;

    @InjectView(R.id.file_download_downloaded_unit)
    private TextView downloaded_unit;

    @InjectView(R.id.file_download_used_time)
    private TextView used_time;

    @InjectView(R.id.file_download_used_time_unit)
    private TextView used_time_unit;

    @InjectView(R.id.file_download_file_block_list)
    private ListView file_block_list;

    @InjectView(R.id.file_download_start)
    private BootstrapButton start;

    private FileDownloadTask task;

    private boolean isStart = false;

    private Toast toast;

    @InjectResource(R.string.kByteSec)
    private String kByteSec;

    @InjectResource(R.string.kMByteSec)
    private String kMByteSec;

    @InjectResource(R.string.minute)
    private String minute;

    @InjectResource(R.string.second)
    private String second;

    private String webSite;

    private String url;

    public static void main(String[] args) {
        System.out.println(343243243 / 1000.0D);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.layout_file_download, container, false);
        return view;
    }

    @Override
    public void onStart() {
        super.onStart();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (task != null) {
            task.cancel(true);
        }
    }

    @Override
    protected void doStuffInBackground(Application app) {
        super.doStuffInBackground(app);
        init();
    }

    private void initTask() {
        task = new FileDownloadTask(getActivity().getBaseContext(), url) {
            @Override
            public void onProgressUpdate(Info... values) {
                if (values != null && values.length > 0) {
                    Log.d(TAG, values[0].type + ": " + values[0].o);
                    refreshUI(values[0]);
                }
            }
        };
    }

    private void init() {
        initConfig();

        start.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!isStart) {
                    initProcess();
                    initTask();
                    task.execute();
                    isStart = true;
                } else {
                    showToast("请等待上一个任务停止");
                }
            }
        });
    }

    private void initConfig() {
        SharedPreferences preferences = getActivity().getSharedPreferences("config", Context.MODE_PRIVATE);
        this.webSite = preferences.getString(FILEDOWNLOAD_CURR_WEBSITE, getString(R.string.default_website));
        this.url = preferences.getString(FILEDOWNLOAD_CURR_URL, getString(R.string.default_file_url));
    }

    private void initProcess() {
        List<Map<String, ?>> data = Lists.newArrayList();

        int blockSize = getActivity().getResources().getInteger(R.integer.filedownload_block_count);
        for (int i = 0; i < blockSize; i++) {
            Map<String, Object> map = Maps.newHashMap();
            map.put("name", "第" + (i + 1) + "个文件块");
            map.put("progress", 0);
            data.add(map);
        }

        file_block_list.setAdapter(new BlockListAdapter(data, getActivity().getBaseContext()));
    }

    private void toMin(TextView textView) {
        if (!textView.getText().equals(minute)) {
            textView.setText(minute);
        }
    }

    private void toSec(TextView textView) {
        if (!textView.getText().equals(second)) {
            textView.setText(second);
        }
    }

    private void toMBS(TextView textView) {
        if (!textView.getText().equals(kMByteSec))
            textView.setText(kMByteSec);
    }

    private void toKBS(TextView textView) {
        if (!textView.getText().equals(kByteSec))
            textView.setText(kByteSec);
    }

    @Override
    public void onPause() {
        super.onPause();
    }

    @Override
    public void onStop() {
        super.onStop();
    }

    @Override
    public void onResume() {
        super.onResume();
    }

    private void reset() {
        formatAndShowSpeed(curr_speed, curr_speed_unit, 0F);
        formatAndShowSpeed(avg_speed, avg_speed_unit, 0F);
        formatAndShowSpeed(max_speed, max_speed_unit, 0F);
        formatAndShowTime(used_time, used_time_unit, 0L);
        formatAndShowDataSize(downloaded, downloaded_unit, 0L);
    }

    private void formatAndShowTime(TextView speedText, TextView unitText, long time) {
        float timeTxt = 0F;
        if (time > 60000) {
            toMin(unitText);
            timeTxt = time / 60000.0F;
        } else {
            toSec(unitText);
            timeTxt = time / 1000.0F;
        }
        speedText.setText(String.format(show_format, timeTxt));
    }

    private void formatAndShowDataSize(TextView text, TextView unitText, long size) {
        formatAndShowSpeed(text, unitText, size);
    }

    private void formatAndShowSpeed(TextView speedText, TextView unitText, float speed) {
        float speedTxt = 0F;
        if (speed > 1000) {
            toMBS(unitText);
            speedTxt = speed / 1024.0F;
        } else {
            toKBS(unitText);
            speedTxt = speed;
        }
        speedText.setText(String.format(show_format, speedTxt));
    }

    private void onCurrSpeed(float speed) {
        formatAndShowSpeed(curr_speed, curr_speed_unit, speed);
    }

    private void onAvgSpeed(float speed) {
        formatAndShowSpeed(avg_speed, avg_speed_unit, speed);
    }

    private void onMaxSpeed(float speed) {
        formatAndShowSpeed(max_speed, max_speed_unit, speed);
    }

    private void onBlock(List<Map<String, ?>> data) {
        for (int i = 0; i < file_block_list.getCount(); i++) {
            View v = file_block_list.getChildAt(i);
            ProgressBar pb = (ProgressBar) v.findViewById(R.id.file_download_block_progress_bar);
            Float progressValue = (Float) data.get(i).get(FileDownloadTask.PROGRESS) * 100;
            pb.setProgress(progressValue.intValue());

            if (pb.getProgress() >= pb.getMax()) {
                TextView textView = (TextView) v.findViewById(R.id.file_download_block_error);
                textView.setText("完成!");
            }
        }
    }

    private void onUsedTime(long time) {
        formatAndShowTime(used_time, used_time_unit, time);
    }

    private void onError(Exception e) {

    }

    private void onDownloaded(long downloaded) {
        this.downloaded.setText(String.format(show_format, downloaded / 1024F / 1024F));
    }

    private void onEnd(FileDownloadTask.State state) {
        isStart = false;
        showToast("下载任务结束");
        formatAndShowSpeed(curr_speed, curr_speed_unit, 0F);
    }

    private void onBlockError(int index) {
        if (index + 1 <= file_block_list.getCount()) {
            View view = file_block_list.getChildAt(index);
            TextView textView = (TextView) view.findViewById(R.id.file_download_block_error);
            textView.setText("文件下载出错!");
        }
    }

    private void showToast(String text) {
        if (toast != null) {
            toast.cancel();
        }
        toast = Toast.makeText(getActivity().getBaseContext(), text, Toast.LENGTH_SHORT);
        toast.show();
    }

    public void setConfig(String webSite, String url) {
        this.webSite = webSite;
        this.url = url;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    private void refreshUI(FileDownloadTask.Info msg) {
        try {
            switch (msg.type) {
                case BLOCK:
                    onBlock((List<Map<String, ?>>) msg.o);
                    break;
                case CURR:
                    onCurrSpeed((Float) msg.o);
                    break;
                case MAX:
                    onMaxSpeed((Float) msg.o);
                    break;
                case AVG:
                    onAvgSpeed((Float) msg.o);
                    break;
                case ERROR:
                    onError((Exception) msg.o);
                    break;
                case WRONG_URL:
                    onError((Exception) msg.o);
                    break;
                case USED_TIME:
                    onUsedTime((Long) msg.o);
                    break;
                case DOWNLOADED:
                    onDownloaded((Long) msg.o);
                    break;
                case END:
                    onEnd((FileDownloadTask.State) msg.o);
                    break;
                case BLOCK_ERROR:
                    onBlockError((Integer) msg.o);
                    break;
            }
        } catch (Exception e) {
            Log.e(TAG, "", e);
        }
    }
}

class BlockListAdapter extends BaseAdapter {

    private List<Map<String, ?>> data;

    private LayoutInflater inflater;

    private Context context;

    public BlockListAdapter(List<Map<String, ?>> data, Context context) {
        this.data = data;
        this.context = context;

        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public int getCount() {
        return data.size();
    }

    @Override
    public Object getItem(int position) {
        return data.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        if (convertView == null) {
            convertView = inflater.inflate(R.layout.layout_file_block_process, null);
        }
        TextView blockName = (TextView) convertView.findViewById(R.id.file_download_block_name);
        ProgressBar progress = (ProgressBar) convertView.findViewById(R.id.file_download_block_progress_bar);

        Map<String, ?> map = data.get(position);
        blockName.setText(String.valueOf(map.get("name")));
        progress.setProgress((Integer) map.get("progress"));

        return convertView;
    }
}